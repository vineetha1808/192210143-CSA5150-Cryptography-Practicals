#include <stdio.h>

int modInverse(int a, int m) {
    int m0 = m, t, q;
    int x0 = 0, x1 = 1;

    if (m == 1)
        return 0;

    while (a > 1) {
        q = a / m;
        t = m;

        m = a % m, a = t;
        t = x0;

        x0 = x1 - q * x0;
        x1 = t;
    }

    if (x1 < 0)
        x1 += m0;

    return x1;
}


char decrypt(char c, int a_inv, int b) {
    if (c >= 'A' && c <= 'Z') {
        return (char) ((((a_inv * ((c - 'A') - b)) % 26 + 26) % 26) + 'A');
    } else if (c >= 'a' && c <= 'z') {
        return (char) ((((a_inv * ((c - 'a') - b)) % 26 + 26) % 26) + 'a');
    }
    return c;
}

int main() {
    char ciphertext[1000], plaintext[1000];
    int a, b, a_inv;
    int mostFreqCipher = 'B' - 'A'; 
    int secondFreqCipher = 'U' - 'A'; 
    int mostFreqPlain = 'E' - 'A'; 
    int secondFreqPlain = 'T' - 'A'; 

   
    int inv15 = modInverse(15, 26);
    a = (19 * inv15) % 26;

    b = (1 - a * 4 + 26) % 26;


    a_inv = modInverse(a, 26);

    printf("Enter the ciphertext: ");
    fgets(ciphertext, sizeof(ciphertext), stdin);

    int i;
    for (i = 0; ciphertext[i] != '\0' && ciphertext[i] != '\n'; i++) {
        plaintext[i] = decrypt(ciphertext[i], a_inv, b);
    }
    plaintext[i] = '\0';

    printf("Decrypted text: %s\n", plaintext);

    return 0;
}
